import com.ibm.mq.jms.MQConnectionFactory
import com.ibm.mq.jms.MQQueueConnectionFactory
import com.ibm.mq.jms.MQQueue
import javax.jms.Connection
import javax.jms.Session
import javax.jms.TextMessage
import com.ibm.mq.jms.JMSC
import java.io.FileInputStream
import java.security.KeyStore
import javax.net.ssl.KeyManagerFactory
import javax.net.ssl.TrustManagerFactory
import javax.net.ssl.SSLContext

def host = "mq-xyz.com"
def port = 1414
def manager = "QWERES3"
def channel = "EDE.AEFDER.SERDSDE.M"
def queueName = "YOUR_QUEUE_NAME"
def messageText = "Hello, MQ!"
def keystorePath = "PATH_TO_KEYSTORE.p12"
def keystorePassword = "KEYSTORE_PASSWORD"

System.setProperty("com.ibm.mq.cfg.useIBMCipherMappings", "false")

// Load the PKCS12 keystore
def keystore = KeyStore.getInstance("PKCS12")
keystore.load(new FileInputStream(keystorePath), keystorePassword.toCharArray())

// Create the KeyManagerFactory and initialize it with the keystore
def kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm())
kmf.init(keystore, keystorePassword.toCharArray())

// Create the TrustManagerFactory and initialize it with the keystore
def tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm())
tmf.init(keystore)

// Create the SSLContext and configure it with the key and trust managers
def sslContext = SSLContext.getInstance("TLS")
sslContext.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null)

// Create MQ connection factory
def cf = new MQQueueConnectionFactory()
cf.setHostName(host)
cf.setPort(port)
cf.setQueueManager(manager)
cf.setChannel(channel)

// Configure SSL context
System.setProperty("javax.net.ssl.keyStore", keystorePath)
System.setProperty("javax.net.ssl.keyStoreType", "PKCS12")
System.setProperty("javax.net.ssl.keyStorePassword", keystorePassword)
System.setProperty("javax.net.ssl.trustStore", keystorePath)
System.setProperty("javax.net.ssl.trustStoreType", "PKCS12")
System.setProperty("javax.net.ssl.trustStorePassword", keystorePassword)
System.setProperty("javax.net.ssl.keyManagerFactory.algorithm", KeyManagerFactory.getDefaultAlgorithm())
System.setProperty("com.ibm.mq.cfg.useIBMCipherMappings", "false")
System.setProperty("com.ibm.mq.cfg.preferTLS", "true")
System.setProperty("com.ibm.mq.cfg.sslCipherSuite", "TLS_RSA_WITH_AES_256_CBC_SHA256")
System.setProperty("com.ibm.mq.cfg.sslSocketFactory", sslContext.getSocketFactory().toString())

// Create MQ connection
def connection = cf.createConnection()
connection.start()

// Create MQ session
def session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE)

// Create MQ queue
def queue = session.createQueue(queueName)

// Create MQ producer
def producer = session.createProducer(queue)

// Create message
def message = session.createTextMessage(messageText)

// Send message
producer.send(message)

// Clean up resources
producer.close()
session.close()
connection.close()
